CREATE TYPE "public"."diet_code" AS ENUM('vegetarian', 'vegan', 'gluten_free', 'lactose_free');--> statement-breakpoint
CREATE TYPE "public"."import_operation" AS ENUM('insert', 'update', 'skip', 'block');--> statement-breakpoint
CREATE TYPE "public"."import_status" AS ENUM('running', 'completed', 'failed');--> statement-breakpoint
CREATE TYPE "public"."prep_time_bucket" AS ENUM('15', '30', '45', '60');--> statement-breakpoint
CREATE TYPE "public"."report_category_code" AS ENUM('bad_data', 'image_issue', 'copyright', 'other');--> statement-breakpoint
CREATE TYPE "public"."report_status_code" AS ENUM('open', 'resolved', 'rejected');--> statement-breakpoint
CREATE TABLE "admin_audit" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"actor_user_id" uuid,
	"target_table" text NOT NULL,
	"target_pk" text NOT NULL,
	"action" text NOT NULL,
	"reason" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "admin_audit_field_changes" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"audit_id" bigint NOT NULL,
	"column_name" text NOT NULL,
	"before_value" text,
	"after_value" text
);
--> statement-breakpoint
CREATE TABLE "attributions" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"recipe_version_id" bigint NOT NULL,
	"source_name" text NOT NULL,
	"source_url" text,
	"source_id" text,
	"image_source_url" text,
	"license" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "content_reports" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"reported_by" uuid,
	"recipe_id" uuid,
	"category_id" smallint NOT NULL,
	"status_id" smallint NOT NULL,
	"comment" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"updated_at" timestamp with time zone DEFAULT now() NOT NULL,
	"processed_by" uuid,
	"processed_at" timestamp with time zone
);
--> statement-breakpoint
CREATE TABLE "daily_picks" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"user_id" uuid NOT NULL,
	"for_date" date NOT NULL,
	"recipe_id" uuid,
	"recipe_version_id" bigint,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "diets" (
	"id" smallint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "diets_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1),
	"code" text NOT NULL,
	"name" text NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	CONSTRAINT "diets_code_unique" UNIQUE("code")
);
--> statement-breakpoint
CREATE TABLE "draw_history" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"user_id" uuid NOT NULL,
	"recipe_id" uuid,
	"recipe_version_id" bigint,
	"prep_time_bucket" text NOT NULL,
	"session_id" uuid,
	"seed" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	CONSTRAINT "draw_history_prep_time_bucket_check" CHECK ("draw_history"."prep_time_bucket" IN ('15', '30', '45', '60'))
);
--> statement-breakpoint
CREATE TABLE "draw_history_diets" (
	"draw_history_id" bigint NOT NULL,
	"diet_id" smallint NOT NULL,
	CONSTRAINT "draw_history_diets_draw_history_id_diet_id_pk" PRIMARY KEY("draw_history_id","diet_id")
);
--> statement-breakpoint
CREATE TABLE "favorites" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"user_id" uuid NOT NULL,
	"recipe_id" uuid NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "import_batches" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"source_name" text NOT NULL,
	"external_batch_id" text,
	"status" text DEFAULT 'running' NOT NULL,
	"started_at" timestamp with time zone DEFAULT now() NOT NULL,
	"completed_at" timestamp with time zone,
	"inserted_count" integer DEFAULT 0 NOT NULL,
	"updated_count" integer DEFAULT 0 NOT NULL,
	"skipped_count" integer DEFAULT 0 NOT NULL,
	"error_count" integer DEFAULT 0 NOT NULL,
	CONSTRAINT "import_batches_external_batch_id_unique" UNIQUE("external_batch_id")
);
--> statement-breakpoint
CREATE TABLE "ingredients" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"name_normalized" text NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "profiles" (
	"user_id" uuid PRIMARY KEY NOT NULL,
	"display_name" text,
	"default_prep_time_bucket" text DEFAULT '30' NOT NULL,
	"accepted_terms_at" timestamp with time zone,
	"accepted_privacy_at" timestamp with time zone,
	"locale" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"updated_at" timestamp with time zone DEFAULT now() NOT NULL,
	CONSTRAINT "locale_length" CHECK (length("profiles"."locale") BETWEEN 2 AND 10),
	CONSTRAINT "default_prep_time_bucket_check" CHECK ("profiles"."default_prep_time_bucket" IN ('15', '30', '45', '60'))
);
--> statement-breakpoint
CREATE TABLE "public_shares" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"slug" text NOT NULL,
	"user_id" uuid NOT NULL,
	"recipe_version_id" bigint,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"expires_at" timestamp with time zone,
	"is_enabled" boolean DEFAULT true NOT NULL,
	CONSTRAINT "public_shares_slug_unique" UNIQUE("slug")
);
--> statement-breakpoint
CREATE TABLE "recipe_diets" (
	"recipe_version_id" bigint NOT NULL,
	"diet_id" smallint NOT NULL,
	CONSTRAINT "recipe_diets_recipe_version_id_diet_id_pk" PRIMARY KEY("recipe_version_id","diet_id")
);
--> statement-breakpoint
CREATE TABLE "recipe_ingredients" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"recipe_version_id" bigint NOT NULL,
	"ingredient_id" bigint NOT NULL,
	"position" smallint DEFAULT 0 NOT NULL,
	"measure" text,
	"quantity" numeric(10, 2),
	"unit" text
);
--> statement-breakpoint
CREATE TABLE "recipe_versions" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"recipe_id" uuid NOT NULL,
	"version" integer NOT NULL,
	"title" text NOT NULL,
	"title_normalized" text NOT NULL,
	"instructions" text,
	"image_url" text,
	"prep_time_estimate" smallint,
	"quality_score" smallint,
	"source" text NOT NULL,
	"source_id" text,
	"valid_from" timestamp with time zone DEFAULT now() NOT NULL,
	"valid_to" timestamp with time zone,
	"is_current" boolean DEFAULT true NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	CONSTRAINT "recipe_versions_quality_score_check" CHECK ("recipe_versions"."quality_score" BETWEEN 0 AND 100),
	CONSTRAINT "recipe_versions_prep_time_check" CHECK ("recipe_versions"."prep_time_estimate" >= 0),
	CONSTRAINT "recipe_versions_current_validity_check" CHECK (("recipe_versions"."is_current" AND "recipe_versions"."valid_to" IS NULL) OR (NOT "recipe_versions"."is_current" AND "recipe_versions"."valid_to" IS NOT NULL))
);
--> statement-breakpoint
CREATE TABLE "recipes" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"is_blocked" boolean DEFAULT false NOT NULL,
	"blocked_at" timestamp with time zone,
	"blocked_by" uuid,
	"current_version_id" bigint
);
--> statement-breakpoint
CREATE TABLE "report_categories" (
	"id" smallint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "report_categories_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1),
	"code" text NOT NULL,
	"name" text NOT NULL,
	CONSTRAINT "report_categories_code_unique" UNIQUE("code")
);
--> statement-breakpoint
CREATE TABLE "report_statuses" (
	"id" smallint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "report_statuses_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1),
	"code" text NOT NULL,
	"name" text NOT NULL,
	CONSTRAINT "report_statuses_code_unique" UNIQUE("code")
);
--> statement-breakpoint
CREATE TABLE "source_records" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"batch_id" bigint NOT NULL,
	"source_name" text NOT NULL,
	"external_id" text NOT NULL,
	"recipe_id" uuid,
	"recipe_version_id" bigint,
	"operation" text NOT NULL,
	"title_raw" text,
	"title_normalized" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "user_diets" (
	"user_id" uuid NOT NULL,
	"diet_id" smallint NOT NULL,
	CONSTRAINT "user_diets_user_id_diet_id_pk" PRIMARY KEY("user_id","diet_id")
);
--> statement-breakpoint
CREATE TABLE "user_hidden_recipes" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"user_id" uuid NOT NULL,
	"recipe_id" uuid NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "user_keys" (
	"id" text PRIMARY KEY NOT NULL,
	"user_id" uuid NOT NULL,
	"hashed_password" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "user_sessions" (
	"id" text PRIMARY KEY NOT NULL,
	"user_id" uuid NOT NULL,
	"expires_at" timestamp with time zone NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "users" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"email" text NOT NULL,
	"email_verified" boolean DEFAULT false NOT NULL,
	"hashed_password" text,
	"google_id" text,
	"is_admin" boolean DEFAULT false NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"updated_at" timestamp with time zone DEFAULT now() NOT NULL,
	CONSTRAINT "users_email_unique" UNIQUE("email"),
	CONSTRAINT "users_google_id_unique" UNIQUE("google_id")
);
--> statement-breakpoint
ALTER TABLE "admin_audit" ADD CONSTRAINT "admin_audit_actor_user_id_profiles_user_id_fk" FOREIGN KEY ("actor_user_id") REFERENCES "public"."profiles"("user_id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "admin_audit_field_changes" ADD CONSTRAINT "admin_audit_field_changes_audit_id_admin_audit_id_fk" FOREIGN KEY ("audit_id") REFERENCES "public"."admin_audit"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "attributions" ADD CONSTRAINT "attributions_recipe_version_id_recipe_versions_id_fk" FOREIGN KEY ("recipe_version_id") REFERENCES "public"."recipe_versions"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "content_reports" ADD CONSTRAINT "content_reports_reported_by_profiles_user_id_fk" FOREIGN KEY ("reported_by") REFERENCES "public"."profiles"("user_id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "content_reports" ADD CONSTRAINT "content_reports_recipe_id_recipes_id_fk" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "content_reports" ADD CONSTRAINT "content_reports_category_id_report_categories_id_fk" FOREIGN KEY ("category_id") REFERENCES "public"."report_categories"("id") ON DELETE restrict ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "content_reports" ADD CONSTRAINT "content_reports_status_id_report_statuses_id_fk" FOREIGN KEY ("status_id") REFERENCES "public"."report_statuses"("id") ON DELETE restrict ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "content_reports" ADD CONSTRAINT "content_reports_processed_by_profiles_user_id_fk" FOREIGN KEY ("processed_by") REFERENCES "public"."profiles"("user_id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "daily_picks" ADD CONSTRAINT "daily_picks_user_id_profiles_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("user_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "daily_picks" ADD CONSTRAINT "daily_picks_recipe_id_recipes_id_fk" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "daily_picks" ADD CONSTRAINT "daily_picks_recipe_version_id_recipe_versions_id_fk" FOREIGN KEY ("recipe_version_id") REFERENCES "public"."recipe_versions"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "draw_history" ADD CONSTRAINT "draw_history_user_id_profiles_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("user_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "draw_history" ADD CONSTRAINT "draw_history_recipe_id_recipes_id_fk" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "draw_history" ADD CONSTRAINT "draw_history_recipe_version_id_recipe_versions_id_fk" FOREIGN KEY ("recipe_version_id") REFERENCES "public"."recipe_versions"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "draw_history_diets" ADD CONSTRAINT "draw_history_diets_draw_history_id_draw_history_id_fk" FOREIGN KEY ("draw_history_id") REFERENCES "public"."draw_history"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "draw_history_diets" ADD CONSTRAINT "draw_history_diets_diet_id_diets_id_fk" FOREIGN KEY ("diet_id") REFERENCES "public"."diets"("id") ON DELETE restrict ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "favorites" ADD CONSTRAINT "favorites_user_id_profiles_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("user_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "favorites" ADD CONSTRAINT "favorites_recipe_id_recipes_id_fk" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "profiles" ADD CONSTRAINT "profiles_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "public_shares" ADD CONSTRAINT "public_shares_user_id_profiles_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("user_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "public_shares" ADD CONSTRAINT "public_shares_recipe_version_id_recipe_versions_id_fk" FOREIGN KEY ("recipe_version_id") REFERENCES "public"."recipe_versions"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "recipe_diets" ADD CONSTRAINT "recipe_diets_recipe_version_id_recipe_versions_id_fk" FOREIGN KEY ("recipe_version_id") REFERENCES "public"."recipe_versions"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "recipe_diets" ADD CONSTRAINT "recipe_diets_diet_id_diets_id_fk" FOREIGN KEY ("diet_id") REFERENCES "public"."diets"("id") ON DELETE restrict ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "recipe_ingredients" ADD CONSTRAINT "recipe_ingredients_recipe_version_id_recipe_versions_id_fk" FOREIGN KEY ("recipe_version_id") REFERENCES "public"."recipe_versions"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "recipe_ingredients" ADD CONSTRAINT "recipe_ingredients_ingredient_id_ingredients_id_fk" FOREIGN KEY ("ingredient_id") REFERENCES "public"."ingredients"("id") ON DELETE restrict ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "recipe_versions" ADD CONSTRAINT "recipe_versions_recipe_id_recipes_id_fk" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "recipes" ADD CONSTRAINT "recipes_blocked_by_profiles_user_id_fk" FOREIGN KEY ("blocked_by") REFERENCES "public"."profiles"("user_id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "recipes" ADD CONSTRAINT "recipes_current_version_id_recipe_versions_id_fk" FOREIGN KEY ("current_version_id") REFERENCES "public"."recipe_versions"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "source_records" ADD CONSTRAINT "source_records_batch_id_import_batches_id_fk" FOREIGN KEY ("batch_id") REFERENCES "public"."import_batches"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "source_records" ADD CONSTRAINT "source_records_recipe_id_recipes_id_fk" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "source_records" ADD CONSTRAINT "source_records_recipe_version_id_recipe_versions_id_fk" FOREIGN KEY ("recipe_version_id") REFERENCES "public"."recipe_versions"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_diets" ADD CONSTRAINT "user_diets_user_id_profiles_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("user_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_diets" ADD CONSTRAINT "user_diets_diet_id_diets_id_fk" FOREIGN KEY ("diet_id") REFERENCES "public"."diets"("id") ON DELETE restrict ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_hidden_recipes" ADD CONSTRAINT "user_hidden_recipes_user_id_profiles_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("user_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_hidden_recipes" ADD CONSTRAINT "user_hidden_recipes_recipe_id_recipes_id_fk" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_keys" ADD CONSTRAINT "user_keys_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_sessions" ADD CONSTRAINT "user_sessions_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
CREATE INDEX "admin_audit_target_table_pk_idx" ON "admin_audit" USING btree ("target_table","target_pk");--> statement-breakpoint
CREATE INDEX "admin_audit_created_at_desc_idx" ON "admin_audit" USING btree ("created_at" DESC NULLS LAST);--> statement-breakpoint
CREATE INDEX "admin_audit_field_changes_audit_id_idx" ON "admin_audit_field_changes" USING btree ("audit_id");--> statement-breakpoint
CREATE INDEX "attributions_recipe_version_id_idx" ON "attributions" USING btree ("recipe_version_id");--> statement-breakpoint
CREATE INDEX "content_reports_recipe_id_idx" ON "content_reports" USING btree ("recipe_id");--> statement-breakpoint
CREATE INDEX "content_reports_reported_by_idx" ON "content_reports" USING btree ("reported_by");--> statement-breakpoint
CREATE INDEX "content_reports_status_id_idx" ON "content_reports" USING btree ("status_id");--> statement-breakpoint
CREATE INDEX "content_reports_created_at_desc_idx" ON "content_reports" USING btree ("created_at" DESC NULLS LAST);--> statement-breakpoint
CREATE UNIQUE INDEX "daily_picks_user_date_unique" ON "daily_picks" USING btree ("user_id","for_date");--> statement-breakpoint
CREATE INDEX "daily_picks_user_id_idx" ON "daily_picks" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX "draw_history_user_created_desc_idx" ON "draw_history" USING btree ("user_id","created_at" DESC NULLS LAST);--> statement-breakpoint
CREATE INDEX "draw_history_user_recipe_created_desc_idx" ON "draw_history" USING btree ("user_id","recipe_id","created_at" DESC NULLS LAST);--> statement-breakpoint
CREATE INDEX "draw_history_diets_diet_id_idx" ON "draw_history_diets" USING btree ("diet_id");--> statement-breakpoint
CREATE UNIQUE INDEX "favorites_user_recipe_unique" ON "favorites" USING btree ("user_id","recipe_id");--> statement-breakpoint
CREATE INDEX "favorites_user_id_idx" ON "favorites" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX "import_batches_source_status_idx" ON "import_batches" USING btree ("source_name","status");--> statement-breakpoint
CREATE INDEX "import_batches_started_at_desc_idx" ON "import_batches" USING btree ("started_at" DESC NULLS LAST);--> statement-breakpoint
CREATE UNIQUE INDEX "ingredients_name_lower_unique" ON "ingredients" USING btree (lower("name"));--> statement-breakpoint
CREATE UNIQUE INDEX "ingredients_name_normalized_lower_unique" ON "ingredients" USING btree (lower("name_normalized"));--> statement-breakpoint
CREATE INDEX "public_shares_recipe_version_id_idx" ON "public_shares" USING btree ("recipe_version_id");--> statement-breakpoint
CREATE INDEX "public_shares_user_id_idx" ON "public_shares" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX "recipe_diets_diet_id_idx" ON "recipe_diets" USING btree ("diet_id");--> statement-breakpoint
CREATE UNIQUE INDEX "recipe_ingredients_version_ingredient_unique" ON "recipe_ingredients" USING btree ("recipe_version_id","ingredient_id");--> statement-breakpoint
CREATE INDEX "recipe_ingredients_ingredient_id_idx" ON "recipe_ingredients" USING btree ("ingredient_id");--> statement-breakpoint
CREATE INDEX "recipe_ingredients_recipe_version_id_idx" ON "recipe_ingredients" USING btree ("recipe_version_id");--> statement-breakpoint
CREATE UNIQUE INDEX "recipe_versions_recipe_version_unique" ON "recipe_versions" USING btree ("recipe_id","version");--> statement-breakpoint
CREATE INDEX "recipe_versions_recipe_current_idx" ON "recipe_versions" USING btree ("recipe_id") WHERE "recipe_versions"."is_current";--> statement-breakpoint
CREATE INDEX "recipe_versions_title_normalized_idx" ON "recipe_versions" USING btree ("title_normalized");--> statement-breakpoint
CREATE INDEX "recipes_current_version_id_idx" ON "recipes" USING btree ("current_version_id");--> statement-breakpoint
CREATE INDEX "recipes_not_blocked_idx" ON "recipes" USING btree ("id") WHERE NOT "recipes"."is_blocked";--> statement-breakpoint
CREATE UNIQUE INDEX "source_records_source_external_unique" ON "source_records" USING btree ("source_name","external_id");--> statement-breakpoint
CREATE INDEX "source_records_batch_id_idx" ON "source_records" USING btree ("batch_id");--> statement-breakpoint
CREATE INDEX "source_records_recipe_id_idx" ON "source_records" USING btree ("recipe_id");--> statement-breakpoint
CREATE INDEX "source_records_recipe_version_id_idx" ON "source_records" USING btree ("recipe_version_id");--> statement-breakpoint
CREATE INDEX "user_diets_diet_id_idx" ON "user_diets" USING btree ("diet_id");--> statement-breakpoint
CREATE UNIQUE INDEX "user_hidden_recipes_user_recipe_unique" ON "user_hidden_recipes" USING btree ("user_id","recipe_id");--> statement-breakpoint
CREATE INDEX "user_hidden_recipes_user_id_idx" ON "user_hidden_recipes" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX "user_keys_user_id_idx" ON "user_keys" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX "user_sessions_user_id_idx" ON "user_sessions" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX "user_sessions_expires_at_idx" ON "user_sessions" USING btree ("expires_at");--> statement-breakpoint
CREATE INDEX "users_email_idx" ON "users" USING btree ("email");--> statement-breakpoint
CREATE INDEX "users_google_id_idx" ON "users" USING btree ("google_id");--> statement-breakpoint
CREATE INDEX "users_is_admin_idx" ON "users" USING btree ("is_admin");